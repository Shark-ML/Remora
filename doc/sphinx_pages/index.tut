.. toctree::
  :hidden:
  
  ./quick_ref.rst
   
Summary
=======

Remora is a general purpose linear algebra library written in C++11. 
It features:

  * Dense and Sparse Matrix and Vector operations
  * A basic set of optimized routines for matrix products, solving linear systems of equations etc
  * Bindings to highly optimized routines of BLAS packages
  * A powerful expression template syntax which features algebraic optimizations of operations
  * Remora is header only, just plug and play!

The goal of Remora is to allow writing of formulas in C++ code as close to mathematical syntax as possible
without penalties in runtime or numerical accuracy.

Quickstart
============================
The power of Remora can be seen in the following lines. We use here linear regression as an example.

Remora gets included via::

  ..includecode<linear_regression.tpp,include>
  
We first generate the data and label matrices for linear regression::

  ..includecode<linear_regression.tpp,data_declaration>
  
We skip the step of data generation, but `X(i,j) = value;` and `y(i) = value;` do the trick.
The formula for linear regression is :math:`w = (X^TX)^{-1}X^T y`. In a typical
implementation we have to be careful, that the matrix has full rank and use a pseudo-inverse instead::

    ..includecode<linear_regression.tpp,solve_w>
    
Operator ``%`` performs matrix-multiplication, ``trans(X)`` is matrix transposition
and ``inv(A,tag)`` performs matrix inversion where we have to supply information
about how to invert that matrix.  Note that no actual matrix inversion is taking place.
The system automatically detects that the matrix inverse is multiplied with another
matrix and instead instructs to solve
a system of equations with multiple right hand sides :math:`X^T`.
Likewise it detects the result is then multiplied with a vector from the right. 
This allows the transformation :math:`(X^TX) w = X^Ty` where we solve for :math:`w`.

Finally, we compute goodness of fit using the formula :math:`E(w)=\frac 1 {2N} \sum_{i=1}^N (x_i^Tw -y)^2`::

  ..includecode<linear_regression.tpp,compute_error>
 
where ``sqr(x)`` is elementwise squaring of the entries and ``sum(x)`` sums
all entries of the vector. Similar we can check whether the solution found is actually correct
by checking whether it is a minimizer, that is the derivative of the error measure above is close
to 0::
 
  ..includecode<linear_regression.tpp,verify_derivative>
  
norm_inf is the infinity norm, which returns the maximum element of the vector.

Tutorials and Quick Reference
--------------------------------------------------------------

An overview of the operations supported by Remora is given in the :doc:`./quick_ref`


Installation and Compile Flags
-------------------------------------------------------------
  
Remora is header-only. just download and copy the contents of the include/ folder into its 
target location. Currently the project can only be downloaded from github:

.. code-block:: none

      git clone https://github.com/Shark-ML/Remora

Remora depends only on header-only boost c++ libraries.
When using Remora, the following defines can be supplied at compile time
  
* REMORA_USE_SIMD if defined, Remora uses the compilers' auto vectorizing capabilities 
  to speed up its computational routines. Requires G++ or clang
* REMORA_USE_CBLAS if defined, Remora binds to a cblas library. 
  On MacOsX, this flag is interpreted as using the accelerate framework.
  Make sure to add the appropriate compile and linker flags for the library.
* REMORA_USE_GPU if defined, Remora is enabling gpu support via the boost/compute
  library. Highly experimental.
  
Remora depends strogly on the optimization level of the compiler. In Debug, many costly index checks
are performed to ensure correctness of the code, while in release high level of optimization should be applied.